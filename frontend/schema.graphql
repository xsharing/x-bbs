"""an account / user"""
type Account implements Node {
  id: ID!
  name: String!
}

input AddCommentInput {
  body: String!
  threadId: ID!
}

type AddCommentPayload {
  commentEdge: CommentEdge!
  success: Boolean!
}

"""a comment"""
type Comment implements Node {
  author: Account!
  body: String!
  id: ID!
  threadId: String!
}

type CommentEdge {
  cursor: ID!
  node: Comment!
}

input CreateThreadInput {
  name: String!
}

type CreateThreadPayload {
  success: Boolean!
  threadEdge: ThreadEdge!
}

type Mutation {
  addComment(input: AddCommentInput!): AddCommentPayload!
  createThread(input: CreateThreadInput!): CreateThreadPayload!
  updateThread(input: UpdateThreadInput!): UpdateThreadPayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  threads(after: ID, before: ID, first: Int, last: Int): QueryThreadsConnection!
}

type QueryThreadsConnection {
  edges: [QueryThreadsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryThreadsConnectionEdge {
  cursor: ID!
  node: Thread!
}

"""a thread"""
type Thread implements Node {
  author: Account!
  comments(after: ID, before: ID, first: Int, last: Int): ThreadCommentsConnection!
  id: ID!
  name: String
}

type ThreadCommentsConnection {
  edges: [ThreadCommentsConnectionEdge]!
  pageInfo: PageInfo!
}

type ThreadCommentsConnectionEdge {
  cursor: ID!
  node: Comment!
}

type ThreadEdge {
  cursor: ID!
  node: Thread!
}

input UpdateThreadInput {
  id: ID!
  name: String!
}

type UpdateThreadPayload {
  success: Boolean!
  threadEdge: ThreadEdge!
}